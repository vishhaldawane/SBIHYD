


					who ? -decides your context/approach
					|developer/tester/deployer/manager/leads
				-------------------
				|		|
				where		when
				|space		|time	- requirement/need
			----------------------------------
			|		|		|
			why		what		how
			|		|		|
			reason	    inFORMation		implementation/coding
				 (processed data)		|
							-----------------
							|		|
							success		feedback
				Java Technology
					|
			----------------------------------
			|		|		|
			JSE		JEE		JME
			|		|		|
		   Core Java		Enterprise	Micro/Mobile
		   Desktop						
					WhiteElephant
						|
				------------------------------
				|
				Enterprise Applicatin Servers
				  - BEA/Oracle WebLOGIC Server
				  - IBM - WebSPHERE - WAS
				  - JBoss
				

		Calculator		Currency	Android
					Converter
					INR/USD
					50000
					Enterprise Java (Beans/class/component)
					
		association		Session		Entity			Message
			OOPS concepts	    |spring	   |jdbc/hibernate/JPA	  |	
		packages		------------	 ------------		 SMS|Mail|Whatsapp
		exception handling	|	  |	 |	    |ORM tool [ object relational mapping ]
		multithreading	     Stateless Stateful  BMP	  CMP
		generics				insert
							update
							delete
	
						brit parle .. ..  code
							[snacks	  [snacks
							shop]	   vending machine]
							shopkeeper	x
							|		|
							you		you

		collections				Persistence
		file handling
		jdbc


		JEE - Big Building
		JSE - foundation


	Ramesh [Enterprises]
		cloth store
		h/w store
		any type of store


	Enterprise Applications has 7 features 
	because of these 7 features, it is known as enterprise application



		this is first feature, because it is first feature

	1. Remote capability 
	
		Networking - connectivity of machines


		java.net

		ServerMachine 	ServerSocket server = new ServerSocket();
		|serve - BankApplication
		|
		|    <--network is must
		|
		|request
		ClientMachine	Socket sock = new Socket();
		

	2. High Availability - HA 
		24 x 7
		365 days (including leap year)
		- 10 to 6 <-- as an employee

		- bank application 00:00 hours to 23:59 hours

		Clustering

			Server1	Server2	Server3	Server4

			
	3. Multithreading 

		- available to 100s,1000s, 100000s users


	4. Pooling of Resources
		- POOL - 
		COMMON RESOURCES TO ALL
		(REGISTRED/NON-registered)
			airindia.com		sbi.com
			| 			|
			flight search		account opening enquiry
			enquiry
		
	Hyderabad : London : 31st Dec
	
		1..2...3..4....500		1..2..3..44...560...
		per hour/day			per hour/per day
		|
	flight list is presented to me
	- will choose one of the flights
	- proceed to "ticket booking"	

		
	5. Caching of Resources
		(DASHBOARD)

		unique id is required to know
		you more
		REGISTER / LOGIN
		|
		email
		birthdate
		address
		personal details
		|
		STORE 
			
	
	6. Transaction management
		ACID

		@Transactional


		bus conductor
		|
		ticket issued/not issued

		atomic
		consistent
		isolated
		durable

	7. Security management

		- TLS - transport layer security
				https

			presentation layer
			application layer
			session layer
			transport layer
			data link layer
				
			physical layer

	ATM/Mobile/PC
		|withdraw<--
		Machine1			Machine2
		|Client				|Server --- SavingsAccount{}
		|				|			withdraw()
		Socket				ServerSocket
		|				|
		Aplication, 			Application
		Presentation, 			PL
		Session, 			Session
		transport, 			TLS
		network, 			NW
		data link, 			DLL
		physical------------------------PH


			WHY NOT THE OLD APP SERVERS??? - PAID

			WHY SPRING HERE???? - OPEN SOURCE F/W


			WHAT IS F/W



		awareness is important


			thought1	thought2	thoughts3.........
				   |		   |
				   gap 		   gap












					    Association
						|
			--------------------------------------------------
			|		|		|		|
			isA		hasA		usesA		produceA
			<--- structural----->		<------operational------>

		Machine
		|isA
		WashingMachine
			WashingDrum - hasA

			WashingMachine(Electricity e) {
			}

			Laundry wash(Water w, Cloth cl[], WashingPowder wp) {
			
				..
				...15 mnts washing 
				rinse();
			}
			rinse(Water w) {
				10mnts
				spin();
			}
			spin() {
				5mns
				end();
			}
			end() {

			}
	
		class Laundry
		{
			WaterBill wb;
			Electricity eb;
			WashingPowder wpb;

		}




		What is a framework?


		- semi-developed application

			- you develop your application on top of it.


			PhotoFramework shop
				|
	what is there?				what is not there?
		|				|
		various frames	are there!!	photo is not there	
		wooden/fiber/plastic/glass
		sizes/shapes
		|
		various types of glass
			reflective/non-reflective
		some samples
		look and feel

		PARIS/FRANCE			PARIS/FRANCE	
		via tour			on your own

			

		Core java 
		|
		Threading f/w
		Collection framework
		jdbc f/w
		i/o f/w

		hiberate f/w
		spring	f/w


		Spring is a f/w
		
		1. a local method - remote method

		2. a non transactional method - transactional method

		3. a non-threading method - a threading method

		4. a non pooled object - can be a pooled object

		5. a non cached object - can be a cached object

		6. a non secured method - can be a secured method


		i want to convert my glider as an aircraft	???

		- book two tickets for an aircraft
		1 for you and 1 for your glider

		and now your glider is now an aircraft
	
		



		vantage point



		To write a simple spring application!


		1. You make a maven project

		2. In maven (pom.xml) 
			declare the dependencies of spring libraries

		



		Machine1	Machine2	Machine3	Machine4
		Laptop		Branch		ClientSide	Onsite[UK]
		|		|		|		|
		Java 11		Java 15		Java 18		Java 20
		Oracle 11	Oracle 18	Oracle 21	Oracle 23
		Spring 4.5	Spring 5	Spring 5.3	Spring 5.9
		Hibernate 4.3	Hiberante 5	Hib 5.3		Hib 5.4
		Tomcat 8	Tomcat 9	Tomcat 10	Tomcat 11

		maven project---> pull it here--->
		|
		pom.xml	
		|
		declare 
		the dependencies
		(website/jar filename/version)
		-java 18
		-oracle 21
		-spring 5.3
		-hib 5.3
		-tom 10
		|
		downloaded on your
		local machine

	
		1. first look up at
			local repositories
		2. company server
			availed from here
		3. internet 
			maven central repositories

















		Spring PROJECT 


		1. make a  MAVEN project (style)
					(pom.xml)

		2. declare Spring libraries in the pom.xml
			spring core jar files

		3. make spring configuration file 
			declare the components/bean in it

		4. test the spring project
			make the objects of your beans


100% pure core java code
	
1. pom.xml  will have spring librariy dependency tag
2. myspring.xml - spring container configuration file
3. your test case to run the container
		      
				Demo
				|
			-----------------
			|		|
			src		pom.xml
			|		|
		-----------------	dependencies of all the libraries you
		|		|	require for your application
		main		test
		|		|
	------------------	junit test cases
	|		|			|      @Test
	java		resources		Test | testCase1() { }
	|		|
		
	coding here	xml configurations here

	SavingsAccount	




	Dependency Injection		Inversion Of Control IoC
	


	class SavingsAccount <-- Entity - identified by its PK
	{
		void withdraw(float amt) {
		
		}
		void deposit(float amt) {
		}
	}	

	class FundTransferService <-- the service class |  SERVICE LAYER
	{
		SavingsAccount source; <-- object to be ready | NULL
		SavingsAccount target; <-- NULL

		FundTransferService(SavingsAccount s, SavingsAccount t)
		{
			source=s; //initializing
			target=t; //initializing
		}
		void transferFunds(float amountToTransfer) {
			source.withdraw(amountToTransfer);
			target.deposit(amountToTransfer);
		}
	}

TEST CASES

	class TransferTest
	{
		void testCase1() {
		
			somebody is nothing but the spring container
			|
			your spring configuration xml file
			
			
			SavingsAccount source = sombody gives the object | new SavingsAccount(50000);
			SavingsAccount target = somebody gives the object | new SavingsAccount(4000);

			FundTransferService service = somebody gives the object | new FundTransferService(source,target);
			
			service.transferFunds(3000);
			
		}
	}

	

	Car 
	   Engine
		Piston


		
		org.springframework.jdbc.datasource
						|
					DriverManagerDataSource
					 |
					-setter functions
					-these funtions to be invoked 




	Convert your entire project as per below structure


	com.sbi
	   | 
	----------------------------------------------------
	|	|	|				|
	table	pojo	repo				service	
	|	|	 |			  	|
mydemo.txt   Department DepartmentRepository(i)	  	DepartmentService(i)
|		|	DeportmentRepositoryImpl(impl)  DepartmentServiceImpl(impl)	
will contain  deptNo		|				|
table 	      deptName		loadTheDepartmentDetails()<---loadDeptDetailsService()
creation      deptLocation
script
and 
DML
operations
		
		1)result set data would be injected in the object of Department class

		2)and this department object would be added in the ArrayList

		3) repeat the step 1 and 2 until the last record of the table

		4) and show the array list output 

Annotation based configurations

	@Component - to declare a bean
	@Repository - to declare a bean, but what is special in it???
			it would perform some repository activity like, 
				insert, update, delete, view, view all on a collection


	@Service    - to declare a bean, but what is special in it
	@Controller - to declare a bean, but what is special in it


	Cook and a Chef

	My mom is a home maker, Chef, Owner, CareTaker, 
	



Comments			vs				Annotations
non executable lines					- extra infromation as comment
							- extended version of comments
not structured						- annotations are structured
limited to the source code				- can be available inside the class file


/*comment1*/
/*comment3*/class SavingsAccount /*comment2*/
{
	/*comment4*/
}			
/*comment5*/

@DevelopedBy(name="deepak", version=1.0) <--- class level annotation
class SavingsAccount
{

	@WealthOfCustomer <--- field level annotation
	float balance;

	@ActivityOfCustomer <-- method level annotation
	void transfer() {
	}

}

	---------------------------------------------------------------------------------
	1		tables		tea_tbl*	pizza_tbl	biryani_tbl
	2		pojo:		Tea*		Pizza		Biryani				
	3		repo:					Chef | Repositories
								       RepositoryImpl
					TeaRepository*			   BiryaniRepository
							PizzaRepository	   	
	Restaurant						Kitchen
	|
	|						    NO ADDMISSION
	---------------------------------------------------------------------------------
	|4				TeaService-NO	PizzaService	BiryaniService
	|
	|					
	|
	+-------------Dining TAble

			6 Menu [ Angular UI ]

			Parents	
		You		Wife
		|
	5	|	Kids		TeaControlle-NOr	PizzaController	BiryaniController
		|			|	
		+------------Controller 
				|			DTO objects - data transfer object
		-----------------------------
		|	|	 |	|
	take a way	swiggy	zomato telephonic call
			app	app

			BillingMachine Controller <-- Queue




	Todays	Menu
		|

	Wada
	Idli
	Dosa
	..
	..





				SpringDemo
					|
		----------------------------------------------
			|	|		|
			pojo	repo		service
			|	|		|
		  Employee	Employee	Employee
		  |		Repository	Serviec
	mapped with		|		|
	Employee tbl		addEmp()	addEmpServ()
				getEmp()

		
In case if the hsql port already bound / occupied

	1. in the cmd prompt
		netstat -aon | find "9001" 

		9001 is the port number of hsqldb
	
	2. taskkill /F /PID  <process id of the command of netstat of the last column"

	3. restart the hsql process 



		

	


	Spring				ORM			JDBC			
	|				|			|
	business logic		Object Relational		pure jdbc code
	|				Mapping			written by us
	like 							in the 
	|							|
	repository						repository
	service
	controller
	rest controller



	Object			Relation
	|			|
	java object		datase base table
	|			|
	object is not		table is not	
	table			object
	|			|
	isA (aggregation)			
	hasA (composition)

	Account					acc_tbl	  sav_tbl	addr_tbl	
	|isA
	SavingsAccount
	    Address homeAddr; hasA
	    Address officeAddr; hasA


						   <----Account---->  SavingsAccount
	SavingsAccount savObj1 = new SavingsAccount(101,"Jack",50000, 4.5f);
	Address h = new Address(21,"West Avenue","Bengaluru","Karnataka",550505);
	Address o = new Address(45,"East Avenue","Mumbai","Maharashtra",335022);

	savObj1.setHomeAddress(h); // Composition - hasA
	savObj1.setOfficeAddress(o); // composition - hasA


	I want to store this object savObj1 on the database [ PERSISTENCE ]
	as a row

	how do i store it

	acc_master
	------------
	PK <-- 
	acno	acname	balance		pancard		issued by	issuedDt
	101	Jack	50000  <--ROW	KDJDE4567P	..		..



	acc_savings
	-------------
		FK <--
	roi	ac_no
	4.5	101 <-- ROW

	account_address
	----------------			FK <---
	house	street	city	state	pin	ac_no
	21	WA	Benga	Kar	55..	101 <-- ROW
	45	EA	Mum	Mah	33..	101 <-- ROW
	


	Address h = new Address(21,"West Avenue","Bengaluru","Karnataka",550505);
	Address o = new Address(45,"East Avenue","Mumbai","Maharashtra",335022);

	

	One to One	
			One to Many
					Many to One
	
							Many to Many	


	Spring
		- spring libraries
		- spring xml
		- spring test


	ORM

		- ORM libraries
		- orm xml - META-INF/persistence.xml

		- pojo mapped with the table
		- orm test case


 





























